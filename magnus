#!/usr/bin/env python3

import os, sys, warnings, enum, inspect, pathlib as pl

try: import setproctitle # pip3 install --user proctitle
except ImportError: setproctitle = None

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('GLib', '2.0')
gi.require_version('GdkPixbuf', '2.0')
try:
	gi.require_version('Keybinder', '3.0')
	from gi.repository import Keybinder # libkeybinder3
except: Keybinder = None
from gi.repository import Gtk, Gdk, GLib, GdkPixbuf

# Be sure to compile it with gcc first
import magnus_pixbuf_proc as mpp


class adict(dict):
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)
		self.__dict__ = self

split_mode = enum.Enum('split_mode', 'h v')


class MagnusCC:

	def __init__(self,
			zoom_k=2, color_mode=1,
			freeze_split=split_mode.h, freeze_delay_ms=2000,
			refresh_ms=250, refresh_ms_force=None ):
		for k, v in inspect.getargvalues(inspect.currentframe() ).locals.items():
			if k != 'self': setattr(self, k, v)
		self.freeze_split = adict((k, self.freeze_split == split_mode[k]) for k in 'hv')
		if self.refresh_ms_force and self.refresh_ms_force < self.refresh_ms:
			self.refresh_ms = self.refresh_ms_force
		self.app = Gtk.Application.new('org.jncDdHBql.K9LwUiqXJ.magnus', 0)
		self.app.connect('activate', self.app_init)

	def app_init(self, app):
		app_name = 'Magnus-CC'
		GLib.set_application_name(app_name)

		# the window
		self.w = win = Gtk.ApplicationWindow.new(self.app)
		win.set_default_size(600, 400)
		win.set_title(app_name)
		win.connect('destroy', lambda a: self.app.quit())
		win.connect('configure-event', self.read_window_size)
		win.connect('window-state-event', self.read_window_size)
		GLib.timeout_add(250, self.read_window_size)

		# the headerbar
		head = Gtk.HeaderBar()
		head.set_show_close_button(True)
		head.props.title = app_name
		win.set_titlebar(head)

		# headerbar - color mode box
		self.freeze_split_btn_click_skip = False
		self.freeze_split_btn = freeze = Gtk.ToggleButton.new_with_label('freeze')
		freeze.connect('clicked', self.freeze_split_btn_click)
		freeze.set_tooltip_text( 'Freeze-split area under'
			f' pointer after {self.freeze_delay_ms/1e3:.1f}s delay' )
		head.pack_end(freeze)

		# headerbar - color mode box
		cm = Gtk.ComboBoxText()
		for n, label in enumerate(mpp.color_modes):
			cm.append(str(n), label)
			if not n or n == self.color_mode: cm.set_active(n)
		cm.connect('changed', self.color_mode_set)
		head.pack_end(cm)

		# headerbar - zoom chooser
		zoom = Gtk.ComboBoxText()
		for n, x in enumerate(range(2, 6)):
			zoom.append(str(x), f'{x}Ã—')
			if not n or x == self.zoom_k: zoom.set_active(n)
		zoom.connect('changed', self.zoom_set)
		head.pack_end(zoom)

		# whole window is cairo drawing surface
		self.img = self.img_freeze = None
		self.da = da = Gtk.DrawingArea()
		da.set_hexpand(True)
		da.set_vexpand(True)
		da.connect('draw', self.draw)
		win.add(da)

		# updates
		self.c_pos, self.w_sz = None, adict(width=0, height=0)
		self.update_force_timer = self.freeze_split_delay = None
		GLib.timeout_add(self.refresh_ms, self.update)

		# bind the zoom keyboard shortcuts
		if Keybinder:
			Keybinder.init()
			if Keybinder.supported():
				Keybinder.bind('<Alt><Super>plus', self.zoom_in, zoom)
				Keybinder.bind('<Alt><Super>equal', self.zoom_in, zoom)
				Keybinder.bind('<Alt><Super>minus', self.zoom_out, zoom)
				Keybinder.bind('<Alt><Super>c', self.color_mode_toggle, cm)
				Keybinder.bind('<Alt><Super>f', self.freeze_split_toggle)
				Keybinder.bind('<Alt><Super><Ctrl>f', self.freeze_split_delayed)

		# show window
		win.show_all()

	def run(self): self.app.run()


	def zoom_out(self, key, zoom):
		current_index = zoom.get_active()
		if current_index == 0: return
		zoom.set_active(current_index - 1)

	def zoom_in(self, key, zoom):
		current_index = zoom.get_active()
		size = zoom.get_model().iter_n_children(None)
		if current_index == size - 1: return
		zoom.set_active(current_index + 1)

	def zoom_set(self, zoom):
		self.zoom_k = int(zoom.get_active_id())
		self.update(force_refresh=True)

	def color_mode_toggle(self, key, cm):
		current_index = cm.get_active()
		size = cm.get_model().iter_n_children(None)
		cm.set_active((current_index + 1) % size)

	def color_mode_set(self, cm):
		self.color_mode = cm.get_active()
		self.update(force_refresh=True)

	def read_window_size(self, *ev):
		self.w_sz = self.da.get_allocation()


	def freeze_split_btn_click(self, w=None, ev=None):
		if self.freeze_split_btn_click_skip:
			self.freeze_split_btn_click_skip = False
			return
		if self.freeze_split_delay:
			GLib.source_remove(self.freeze_split_delay)
			self.freeze_split_delay = None
			return
		self.freeze_split_delayed()

	def freeze_split_btn_set(self):
		v, v_old = bool(self.img_freeze), bool(self.freeze_split_btn.get_active())
		if v_old == v: return
		self.freeze_split_btn_click_skip = True # click-event emitted on set_active
		self.freeze_split_btn.set_active(v)

	def freeze_split_toggle(self, key=None, force=False):
		if not force and self.img_freeze: self.img_freeze = None
		else: self.img_freeze = True
		self.update(force_refresh=True)
		if self.img_freeze: self.img_freeze = self.img
		self.freeze_split_btn_set()

	def freeze_split_delayed(self, key=None):
		if self.freeze_split_delay: return
		if self.img_freeze: return self.freeze_split_toggle()
		self.freeze_split_delay = GLib.timeout_add(
			self.freeze_delay_ms, self.freeze_split_delay_func )

	def freeze_split_delay_func(self):
		self.freeze_split_delay = None
		self.freeze_split_toggle(force=True)


	def update_force_timer_func(self):
		self.update_force_timer = None
		self.update(force_refresh=True)

	def update(self, force_refresh=False):
		# Check and cancel/delay update, if not needed
		screen, x, y, modifier = Gdk.Display.get_default().get_pointer()
		if self.refresh_ms == self.refresh_ms_force: force_refresh = True
		if not force_refresh and self.c_pos == (x, y):
			if self.refresh_ms_force and not self.update_force_timer:
				self.update_force_timer = GLib.timeout_add(
					self.refresh_ms_force - self.refresh_ms, self.update_force_timer_func )
			return True # no changes
		if self.update_force_timer:
			GLib.source_remove(self.update_force_timer)
			self.update_force_timer = None

		self.c_pos = x, y
		w, h = self.w_sz.width, self.w_sz.height
		if self.img_freeze:
			if self.freeze_split.h: h //= 2
			elif self.freeze_split.v: w //= 2
		w, h = w // self.zoom_k, h // self.zoom_k
		screenshot = Gdk.pixbuf_get_from_window(
			Gdk.get_default_root_window(), x - w // 2, y - h // 2, w, h )
		if screenshot:
			self.img = self.tweak_colors(screenshot).scale_simple(
				w * self.zoom_k, h * self.zoom_k, GdkPixbuf.InterpType.NEAREST )
			self.da.queue_draw()
		return True

	def tweak_colors(self, img):
		cs = img.get_property('colorspace')
		if cs != GdkPixbuf.Colorspace.RGB:
			warnings.warn(f'Disabling color tweaks - unsupported colorspace: {cs}')
		else:
			buff = img.get_pixels()
			mpp.apply_curves(self.color_mode, buff)
			img = GdkPixbuf.Pixbuf.new_from_data( buff, cs,
				False, 8, img.get_width(), img.get_height(), img.get_rowstride() )
		return img

	def draw(self, da, ctx):
		if not self.img:
			Gtk.render_background( da.get_style_context(),
				ctx, 0, 0, self.w_sz.width, self.w_sz.height )
			return

		Gdk.cairo_set_source_pixbuf(ctx, self.img, 0, 0)
		ctx.paint()
		if not self.img_freeze: return

		if self.freeze_split.h: ctx.translate(0, self.img.get_height())
		elif self.freeze_split.v: ctx.translate(self.img.get_width(), 0)
		Gdk.cairo_set_source_pixbuf(ctx, self.img_freeze, 0, 0)
		ctx.paint()


def main(args=None):
	mode_info = ', '.join(f'{n} - {m}' for n,m in enumerate(mpp.color_modes))

	import argparse
	parser = argparse.ArgumentParser(
		description='Simple screen magnifier tool with color tweaks.')

	group = parser.add_argument_group('Basic/misc parameters')
	group.add_argument('-z', '--initial-zoom',
		type=int, metavar='level', default=2,
		help='Initial zoom level/factor. Default: %(default)sx')
	group.add_argument('-c', '--color-mode',
		type=int, metavar='n', default=1,
		help=f'Color tweak mode index: {mode_info}. Default: %(default)s')

	group = parser.add_argument_group('Refresh parameters')
	group.add_argument('-r', '--refresh-interval',
		type=int, metavar='ms', default=250,
		help='Refresh interval in milliseconds (lower is faster).'
			' Skips update if mouse pointer did not move. Default: %(default)sms')
	group.add_argument('-f', '--refresh-interval-force',
		type=int, metavar='ms',
		help='Force-refresh interval in milliseconds.'
			' If specified, refresh will always happen at least'
				' with this interval, regardless of mouse pointer movement.'
			' Special 0 value will set it to be equal to -r/--refresh-interval.'
			' Default: none (disabled)')

	group = parser.add_argument_group('Freeze-split mode parameters')
	group.add_argument('-s', '--freeze-split',
		metavar='( h | v )', default='horizontal',
		help='When using freeze-key feature,'
				' sets how to split the window - either horizontally or vertically.'
			' Only first letter matters (h or v). Default: %(default)s')
	group.add_argument('-d', '--freeze-key-delay',
		type=float, metavar='s', default=2.0,
		help='Delay value between "delayed freeze-key" keypress'
			' and taking a snapshot, in seconds (can be <1.0). Default: %(default)ss')

	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	if opts.color_mode >= len(mpp.color_modes):
		parser.error(f'Invalid -c/--color-mode value: {opts.color_mode}')
	if opts.refresh_interval_force == 0:
		opts.refresh_interval_force = opts.refresh_interval
	try: fsm = split_mode[(opts.freeze_split.strip() or 'h')[0].lower()]
	except KeyError: parser.error(f'Invalid -s/--freeze-split value: {opts.freeze_split}')

	MagnusCC(
		opts.initial_zoom, opts.color_mode,
		fsm, int(opts.freeze_key_delay * 1e3),
		opts.refresh_interval, opts.refresh_interval_force ).run()

if __name__ == '__main__':
	import signal
	signal.signal(signal.SIGINT, signal.SIG_DFL) # allow gtk to handle this (die quietly)
	if setproctitle: setproctitle.setproctitle('magnus')
	warnings.filterwarnings('ignore', category=DeprecationWarning)
	sys.exit(main())
